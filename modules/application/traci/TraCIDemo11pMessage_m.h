//
// Generated file, do not edit! Created by nedtool 5.5 from veins/modules/application/traci/TraCIDemo11pMessage.msg.
//

#ifndef __VEINS_TRACIDEMO11PMESSAGE_M_H
#define __VEINS_TRACIDEMO11PMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/TraCIDemo11pMessage.msg:35</tt> by nedtool.
 * <pre>
 * packet TraCIDemo11pMessage extends BaseFrame1609_4
 * {
 *     LAddress::L2Type senderAddress = -1;
 *     int serial = 0;
 * 
 *     double senderSpeedRLDCO;
 *     Coord senderPositionRLDCO;
 *     int hopCountRLDCO;
 *     int SenderType;
 *     int AvailableResource;
 * 
 *     int TargetAddress;
 *     Coord TargetCoord;
 * 
 *     Coord EntryCoord;
 *     Coord ExitCoord;
 * 
 *     double SenderVelocity;
 *     double AverageSpeed;
 *     int MessageTime;
 *     int TimeToReach;
 *     int DwellTime;
 *     double DwellDistance;
 *     string NeighborChain;
 * 
 * 
 * 
 *     // RSU sends wsm to vehicles in range
 * 
 *     bool InRange;
 * 
 * }
 * </pre>
 */
class VEINS_API TraCIDemo11pMessage : public ::veins::BaseFrame1609_4
{
  protected:
    LAddress::L2Type senderAddress;
    int serial;
    double senderSpeedRLDCO;
    Coord senderPositionRLDCO;
    int hopCountRLDCO;
    int SenderType;
    int AvailableResource;
    int TargetAddress;
    Coord TargetCoord;
    Coord EntryCoord;
    Coord ExitCoord;
    double SenderVelocity;
    double AverageSpeed;
    int MessageTime;
    int TimeToReach;
    int DwellTime;
    double DwellDistance;
    ::omnetpp::opp_string NeighborChain;
    bool InRange;

  private:
    void copy(const TraCIDemo11pMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TraCIDemo11pMessage&);

  public:
    TraCIDemo11pMessage(const char *name=nullptr, short kind=0);
    TraCIDemo11pMessage(const TraCIDemo11pMessage& other);
    virtual ~TraCIDemo11pMessage();
    TraCIDemo11pMessage& operator=(const TraCIDemo11pMessage& other);
    virtual TraCIDemo11pMessage *dup() const override {return new TraCIDemo11pMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual LAddress::L2Type& getSenderAddress();
    virtual const LAddress::L2Type& getSenderAddress() const {return const_cast<TraCIDemo11pMessage*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual double getSenderSpeedRLDCO() const;
    virtual void setSenderSpeedRLDCO(double senderSpeedRLDCO);
    virtual Coord& getSenderPositionRLDCO();
    virtual const Coord& getSenderPositionRLDCO() const {return const_cast<TraCIDemo11pMessage*>(this)->getSenderPositionRLDCO();}
    virtual void setSenderPositionRLDCO(const Coord& senderPositionRLDCO);
    virtual int getHopCountRLDCO() const;
    virtual void setHopCountRLDCO(int hopCountRLDCO);
    virtual int getSenderType() const;
    virtual void setSenderType(int SenderType);
    virtual int getAvailableResource() const;
    virtual void setAvailableResource(int AvailableResource);
    virtual int getTargetAddress() const;
    virtual void setTargetAddress(int TargetAddress);
    virtual Coord& getTargetCoord();
    virtual const Coord& getTargetCoord() const {return const_cast<TraCIDemo11pMessage*>(this)->getTargetCoord();}
    virtual void setTargetCoord(const Coord& TargetCoord);
    virtual Coord& getEntryCoord();
    virtual const Coord& getEntryCoord() const {return const_cast<TraCIDemo11pMessage*>(this)->getEntryCoord();}
    virtual void setEntryCoord(const Coord& EntryCoord);
    virtual Coord& getExitCoord();
    virtual const Coord& getExitCoord() const {return const_cast<TraCIDemo11pMessage*>(this)->getExitCoord();}
    virtual void setExitCoord(const Coord& ExitCoord);
    virtual double getSenderVelocity() const;
    virtual void setSenderVelocity(double SenderVelocity);
    virtual double getAverageSpeed() const;
    virtual void setAverageSpeed(double AverageSpeed);
    virtual int getMessageTime() const;
    virtual void setMessageTime(int MessageTime);
    virtual int getTimeToReach() const;
    virtual void setTimeToReach(int TimeToReach);
    virtual int getDwellTime() const;
    virtual void setDwellTime(int DwellTime);
    virtual double getDwellDistance() const;
    virtual void setDwellDistance(double DwellDistance);
    virtual const char * getNeighborChain() const;
    virtual void setNeighborChain(const char * NeighborChain);
    virtual bool getInRange() const;
    virtual void setInRange(bool InRange);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TraCIDemo11pMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TraCIDemo11pMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_TRACIDEMO11PMESSAGE_M_H

